// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    
    // Game-specific relations
    commanderGames Game[]   @relation("CommanderToGame")
    pawnGameAssignments GamePawn[]
    pawnBattles   Battle[]  @relation("PawnToBattle")
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Game Models
model Game {
    id            String    @id @default(cuid())
    name          String
    status        String    @default("WAITING") // WAITING, ACTIVE, COMPLETED
    maxCommanders Int       @default(4)
    maxPawns      Int       @default(100)
    mapType       String    @default("CLASSIC")
    commanders    User[]    @relation("CommanderToGame")
    pawnsInGame   GamePawn[]
    territories   Territory[]
    battles       Battle[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model GamePawn {
    id            String    @id @default(cuid())
    gameId        String
    game          Game      @relation(fields: [gameId], references: [id])
    userId        String
    user          User      @relation(fields: [userId], references: [id])
    commanderId   String    // ID of the commander whose army they joined
    createdAt     DateTime  @default(now())

    @@unique([gameId, userId]) // A user can only be one pawn per game
}

model Territory {
    id            String    @id @default(cuid())
    name          String
    gameId        String
    game          Game      @relation(fields: [gameId], references: [id])
    ownerId       String?   // Commander User ID, null = neutral
    troops        Int       @default(5)
    xPosition     Float     // For map rendering
    yPosition     Float
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Battle {
    id            String    @id @default(cuid())
    gameId        String
    game          Game      @relation(fields: [gameId], references: [id])
    attackingTerritoryId String
    defendingTerritoryId String
    attackingCommanderId String
    defendingCommanderId String
    pawns         User[]    @relation("PawnToBattle")
    status        String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
    battlefield   Battlefield?
    winnerId      String?   // Commander User ID who won
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Battlefield {
    id            String    @id @default(cuid())
    battleId      String    @unique
    battle        Battle    @relation(fields: [battleId], references: [id])
    width         Int       @default(10)
    height        Int       @default(10)
    terrain       Json      // POC: Simple 2D array ['PLAIN', 'FOREST', 'HILL']
    units         Unit[]
    currentRound  Int       @default(0)
    timePerRound  Int       @default(20) // seconds
    commanderData Json?     // e.g., { commanderId1: { cp: 10 }, commanderId2: { cp: 10 } }
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Unit {
    id            String    @id @default(cuid())
    battlefieldId String
    battlefield   Battlefield @relation(fields: [battlefieldId], references: [id])
    type          String    // INFANTRY, HEAVY, RANGED (POC)
    commanderId   String    // User ID of the commander this unit belongs to
    controlledBy  String?   // User ID of the Pawn controlling, null = AI
    xPosition     Int
    yPosition     Int
    health        Int       @default(100)
    nextAction    Json?     // Action for next round processing
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}
